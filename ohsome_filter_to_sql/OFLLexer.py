# Generated from OFL.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,33,365,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,1,0,1,0,1,1,1,1,1,2,1,
        2,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,
        8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,
        12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,
        14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
        16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,
        17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,
        18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
        18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
        19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
        20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
        21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,
        22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
        23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,248,8,23,1,24,1,24,1,24,1,
        24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,275,8,25,1,26,4,
        26,278,8,26,11,26,12,26,279,1,27,4,27,283,8,27,11,27,12,27,284,1,
        27,1,27,4,27,289,8,27,11,27,12,27,290,3,27,293,8,27,1,27,1,27,4,
        27,297,8,27,11,27,12,27,298,3,27,301,8,27,1,28,4,28,304,8,28,11,
        28,12,28,305,1,29,1,29,4,29,310,8,29,11,29,12,29,311,1,29,1,29,1,
        30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
        30,3,30,330,8,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
        31,1,31,1,31,1,31,1,31,3,31,346,8,31,1,32,4,32,349,8,32,11,32,12,
        32,350,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,3,35,361,8,35,1,36,
        1,36,1,36,0,0,37,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
        22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
        33,67,0,69,0,71,0,73,0,1,0,6,2,0,69,69,101,101,3,0,9,10,13,13,32,
        32,1,0,48,57,5,0,45,45,48,57,65,90,95,95,97,122,4,0,10,10,13,13,
        34,34,92,92,4,0,34,34,92,92,110,110,114,114,379,0,1,1,0,0,0,0,3,
        1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
        0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
        0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
        0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,
        0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,
        0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,
        0,0,0,0,65,1,0,0,0,1,75,1,0,0,0,3,77,1,0,0,0,5,79,1,0,0,0,7,81,1,
        0,0,0,9,84,1,0,0,0,11,86,1,0,0,0,13,89,1,0,0,0,15,91,1,0,0,0,17,
        95,1,0,0,0,19,98,1,0,0,0,21,102,1,0,0,0,23,104,1,0,0,0,25,109,1,
        0,0,0,27,112,1,0,0,0,29,121,1,0,0,0,31,126,1,0,0,0,33,136,1,0,0,
        0,35,143,1,0,0,0,37,161,1,0,0,0,39,177,1,0,0,0,41,193,1,0,0,0,43,
        203,1,0,0,0,45,224,1,0,0,0,47,247,1,0,0,0,49,249,1,0,0,0,51,274,
        1,0,0,0,53,277,1,0,0,0,55,282,1,0,0,0,57,303,1,0,0,0,59,307,1,0,
        0,0,61,329,1,0,0,0,63,345,1,0,0,0,65,348,1,0,0,0,67,354,1,0,0,0,
        69,356,1,0,0,0,71,360,1,0,0,0,73,362,1,0,0,0,75,76,5,40,0,0,76,2,
        1,0,0,0,77,78,5,41,0,0,78,4,1,0,0,0,79,80,5,61,0,0,80,6,1,0,0,0,
        81,82,5,105,0,0,82,83,5,110,0,0,83,8,1,0,0,0,84,85,5,44,0,0,85,10,
        1,0,0,0,86,87,5,33,0,0,87,88,5,61,0,0,88,12,1,0,0,0,89,90,5,58,0,
        0,90,14,1,0,0,0,91,92,5,97,0,0,92,93,5,110,0,0,93,94,5,100,0,0,94,
        16,1,0,0,0,95,96,5,111,0,0,96,97,5,114,0,0,97,18,1,0,0,0,98,99,5,
        110,0,0,99,100,5,111,0,0,100,101,5,116,0,0,101,20,1,0,0,0,102,103,
        5,42,0,0,103,22,1,0,0,0,104,105,5,116,0,0,105,106,5,121,0,0,106,
        107,5,112,0,0,107,108,5,101,0,0,108,24,1,0,0,0,109,110,5,105,0,0,
        110,111,5,100,0,0,111,26,1,0,0,0,112,113,5,103,0,0,113,114,5,101,
        0,0,114,115,5,111,0,0,115,116,5,109,0,0,116,117,5,101,0,0,117,118,
        5,116,0,0,118,119,5,114,0,0,119,120,5,121,0,0,120,28,1,0,0,0,121,
        122,5,97,0,0,122,123,5,114,0,0,123,124,5,101,0,0,124,125,5,97,0,
        0,125,30,1,0,0,0,126,127,5,112,0,0,127,128,5,101,0,0,128,129,5,114,
        0,0,129,130,5,105,0,0,130,131,5,109,0,0,131,132,5,101,0,0,132,133,
        5,116,0,0,133,134,5,101,0,0,134,135,5,114,0,0,135,32,1,0,0,0,136,
        137,5,108,0,0,137,138,5,101,0,0,138,139,5,110,0,0,139,140,5,103,
        0,0,140,141,5,116,0,0,141,142,5,104,0,0,142,34,1,0,0,0,143,144,5,
        103,0,0,144,145,5,101,0,0,145,146,5,111,0,0,146,147,5,109,0,0,147,
        148,5,101,0,0,148,149,5,116,0,0,149,150,5,114,0,0,150,151,5,121,
        0,0,151,152,5,46,0,0,152,153,5,118,0,0,153,154,5,101,0,0,154,155,
        5,114,0,0,155,156,5,116,0,0,156,157,5,105,0,0,157,158,5,99,0,0,158,
        159,5,101,0,0,159,160,5,115,0,0,160,36,1,0,0,0,161,162,5,103,0,0,
        162,163,5,101,0,0,163,164,5,111,0,0,164,165,5,109,0,0,165,166,5,
        101,0,0,166,167,5,116,0,0,167,168,5,114,0,0,168,169,5,121,0,0,169,
        170,5,46,0,0,170,171,5,111,0,0,171,172,5,117,0,0,172,173,5,116,0,
        0,173,174,5,101,0,0,174,175,5,114,0,0,175,176,5,115,0,0,176,38,1,
        0,0,0,177,178,5,103,0,0,178,179,5,101,0,0,179,180,5,111,0,0,180,
        181,5,109,0,0,181,182,5,101,0,0,182,183,5,116,0,0,183,184,5,114,
        0,0,184,185,5,121,0,0,185,186,5,46,0,0,186,187,5,105,0,0,187,188,
        5,110,0,0,188,189,5,110,0,0,189,190,5,101,0,0,190,191,5,114,0,0,
        191,192,5,115,0,0,192,40,1,0,0,0,193,194,5,99,0,0,194,195,5,104,
        0,0,195,196,5,97,0,0,196,197,5,110,0,0,197,198,5,103,0,0,198,199,
        5,101,0,0,199,200,5,115,0,0,200,201,5,101,0,0,201,202,5,116,0,0,
        202,42,1,0,0,0,203,204,5,99,0,0,204,205,5,104,0,0,205,206,5,97,0,
        0,206,207,5,110,0,0,207,208,5,103,0,0,208,209,5,101,0,0,209,210,
        5,115,0,0,210,211,5,101,0,0,211,212,5,116,0,0,212,213,5,46,0,0,213,
        214,5,99,0,0,214,215,5,114,0,0,215,216,5,101,0,0,216,217,5,97,0,
        0,217,218,5,116,0,0,218,219,5,101,0,0,219,220,5,100,0,0,220,221,
        5,95,0,0,221,222,5,98,0,0,222,223,5,121,0,0,223,44,1,0,0,0,224,225,
        5,104,0,0,225,226,5,97,0,0,226,227,5,115,0,0,227,228,5,104,0,0,228,
        229,5,116,0,0,229,230,5,97,0,0,230,231,5,103,0,0,231,46,1,0,0,0,
        232,233,5,110,0,0,233,234,5,111,0,0,234,235,5,100,0,0,235,248,5,
        101,0,0,236,237,5,119,0,0,237,238,5,97,0,0,238,248,5,121,0,0,239,
        240,5,114,0,0,240,241,5,101,0,0,241,242,5,108,0,0,242,243,5,97,0,
        0,243,244,5,116,0,0,244,245,5,105,0,0,245,246,5,111,0,0,246,248,
        5,110,0,0,247,232,1,0,0,0,247,236,1,0,0,0,247,239,1,0,0,0,248,48,
        1,0,0,0,249,250,3,47,23,0,250,251,5,47,0,0,251,252,3,53,26,0,252,
        50,1,0,0,0,253,254,5,112,0,0,254,255,5,111,0,0,255,256,5,105,0,0,
        256,257,5,110,0,0,257,275,5,116,0,0,258,259,5,108,0,0,259,260,5,
        105,0,0,260,261,5,110,0,0,261,275,5,101,0,0,262,263,5,112,0,0,263,
        264,5,111,0,0,264,265,5,108,0,0,265,266,5,121,0,0,266,267,5,103,
        0,0,267,268,5,111,0,0,268,275,5,110,0,0,269,270,5,111,0,0,270,271,
        5,116,0,0,271,272,5,104,0,0,272,273,5,101,0,0,273,275,5,114,0,0,
        274,253,1,0,0,0,274,258,1,0,0,0,274,262,1,0,0,0,274,269,1,0,0,0,
        275,52,1,0,0,0,276,278,3,67,33,0,277,276,1,0,0,0,278,279,1,0,0,0,
        279,277,1,0,0,0,279,280,1,0,0,0,280,54,1,0,0,0,281,283,3,67,33,0,
        282,281,1,0,0,0,283,284,1,0,0,0,284,282,1,0,0,0,284,285,1,0,0,0,
        285,292,1,0,0,0,286,288,5,46,0,0,287,289,3,67,33,0,288,287,1,0,0,
        0,289,290,1,0,0,0,290,288,1,0,0,0,290,291,1,0,0,0,291,293,1,0,0,
        0,292,286,1,0,0,0,292,293,1,0,0,0,293,300,1,0,0,0,294,296,7,0,0,
        0,295,297,3,67,33,0,296,295,1,0,0,0,297,298,1,0,0,0,298,296,1,0,
        0,0,298,299,1,0,0,0,299,301,1,0,0,0,300,294,1,0,0,0,300,301,1,0,
        0,0,301,56,1,0,0,0,302,304,3,69,34,0,303,302,1,0,0,0,304,305,1,0,
        0,0,305,303,1,0,0,0,305,306,1,0,0,0,306,58,1,0,0,0,307,309,5,34,
        0,0,308,310,3,71,35,0,309,308,1,0,0,0,310,311,1,0,0,0,311,309,1,
        0,0,0,311,312,1,0,0,0,312,313,1,0,0,0,313,314,5,34,0,0,314,60,1,
        0,0,0,315,316,3,53,26,0,316,317,5,46,0,0,317,318,5,46,0,0,318,319,
        1,0,0,0,319,320,3,53,26,0,320,330,1,0,0,0,321,322,5,46,0,0,322,323,
        5,46,0,0,323,324,1,0,0,0,324,330,3,53,26,0,325,326,3,53,26,0,326,
        327,5,46,0,0,327,328,5,46,0,0,328,330,1,0,0,0,329,315,1,0,0,0,329,
        321,1,0,0,0,329,325,1,0,0,0,330,62,1,0,0,0,331,332,3,55,27,0,332,
        333,5,46,0,0,333,334,5,46,0,0,334,335,1,0,0,0,335,336,3,55,27,0,
        336,346,1,0,0,0,337,338,5,46,0,0,338,339,5,46,0,0,339,340,1,0,0,
        0,340,346,3,55,27,0,341,342,3,55,27,0,342,343,5,46,0,0,343,344,5,
        46,0,0,344,346,1,0,0,0,345,331,1,0,0,0,345,337,1,0,0,0,345,341,1,
        0,0,0,346,64,1,0,0,0,347,349,7,1,0,0,348,347,1,0,0,0,349,350,1,0,
        0,0,350,348,1,0,0,0,350,351,1,0,0,0,351,352,1,0,0,0,352,353,6,32,
        0,0,353,66,1,0,0,0,354,355,7,2,0,0,355,68,1,0,0,0,356,357,7,3,0,
        0,357,70,1,0,0,0,358,361,8,4,0,0,359,361,3,73,36,0,360,358,1,0,0,
        0,360,359,1,0,0,0,361,72,1,0,0,0,362,363,5,92,0,0,363,364,7,5,0,
        0,364,74,1,0,0,0,15,0,247,274,279,284,290,292,298,300,305,311,329,
        345,350,360,1,6,0,0
    ]

class OFLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    AND = 8
    OR = 9
    NOT = 10
    WILDCARD = 11
    TYPE = 12
    ID = 13
    GEOMETRY = 14
    AREA = 15
    PERIMETER = 16
    LENGTH = 17
    GEOMETRY_VERTICES = 18
    GEOMETRY_OUTERS = 19
    GEOMETRY_INNERS = 20
    CHANGESET = 21
    CHANGESET_CREATEDBY = 22
    HASHTAG = 23
    OSMTYPE = 24
    OSMID = 25
    GEOMETRY_TYPE = 26
    NUMBER = 27
    DECIMAL = 28
    WORD = 29
    QUOTED = 30
    RANGE_INT = 31
    RANGE_DEC = 32
    WHITESPACE = 33

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'='", "'in'", "','", "'!='", "':'", "'and'", 
            "'or'", "'not'", "'*'", "'type'", "'id'", "'geometry'", "'area'", 
            "'perimeter'", "'length'", "'geometry.vertices'", "'geometry.outers'", 
            "'geometry.inners'", "'changeset'", "'changeset.created_by'", 
            "'hashtag'" ]

    symbolicNames = [ "<INVALID>",
            "AND", "OR", "NOT", "WILDCARD", "TYPE", "ID", "GEOMETRY", "AREA", 
            "PERIMETER", "LENGTH", "GEOMETRY_VERTICES", "GEOMETRY_OUTERS", 
            "GEOMETRY_INNERS", "CHANGESET", "CHANGESET_CREATEDBY", "HASHTAG", 
            "OSMTYPE", "OSMID", "GEOMETRY_TYPE", "NUMBER", "DECIMAL", "WORD", 
            "QUOTED", "RANGE_INT", "RANGE_DEC", "WHITESPACE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "AND", "OR", "NOT", "WILDCARD", "TYPE", "ID", "GEOMETRY", 
                  "AREA", "PERIMETER", "LENGTH", "GEOMETRY_VERTICES", "GEOMETRY_OUTERS", 
                  "GEOMETRY_INNERS", "CHANGESET", "CHANGESET_CREATEDBY", 
                  "HASHTAG", "OSMTYPE", "OSMID", "GEOMETRY_TYPE", "NUMBER", 
                  "DECIMAL", "WORD", "QUOTED", "RANGE_INT", "RANGE_DEC", 
                  "WHITESPACE", "NUMERAL", "LETTER", "CHARACTER", "EscapeSequence" ]

    grammarFileName = "OFL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


