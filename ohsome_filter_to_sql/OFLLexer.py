# Generated from OFL.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,32,334,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,
        1,3,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,
        1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,
        13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,
        15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
        16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,
        18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
        19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
        19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
        20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
        21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,
        22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,
        23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,
        24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,249,8,24,1,25,1,25,1,
        25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
        26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,276,8,26,1,
        27,4,27,279,8,27,11,27,12,27,280,1,28,4,28,284,8,28,11,28,12,28,
        285,1,28,1,28,4,28,290,8,28,11,28,12,28,291,3,28,294,8,28,1,28,1,
        28,4,28,298,8,28,11,28,12,28,299,3,28,302,8,28,1,29,4,29,305,8,29,
        11,29,12,29,306,1,30,1,30,4,30,311,8,30,11,30,12,30,312,1,30,1,30,
        1,31,4,31,318,8,31,11,31,12,31,319,1,31,1,31,1,32,1,32,1,33,1,33,
        1,34,1,34,3,34,330,8,34,1,35,1,35,1,35,0,0,36,1,1,3,2,5,3,7,4,9,
        5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
        33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
        55,28,57,29,59,30,61,31,63,32,65,0,67,0,69,0,71,0,1,0,6,2,0,69,69,
        101,101,3,0,9,10,13,13,32,32,1,0,48,57,5,0,45,45,48,57,65,90,95,
        95,97,122,4,0,10,10,13,13,34,34,92,92,4,0,34,34,92,92,110,110,114,
        114,344,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,
        0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,
        0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,
        0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,
        0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,
        0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,
        0,0,0,61,1,0,0,0,0,63,1,0,0,0,1,73,1,0,0,0,3,75,1,0,0,0,5,77,1,0,
        0,0,7,79,1,0,0,0,9,82,1,0,0,0,11,84,1,0,0,0,13,87,1,0,0,0,15,89,
        1,0,0,0,17,92,1,0,0,0,19,96,1,0,0,0,21,99,1,0,0,0,23,103,1,0,0,0,
        25,105,1,0,0,0,27,110,1,0,0,0,29,113,1,0,0,0,31,122,1,0,0,0,33,127,
        1,0,0,0,35,137,1,0,0,0,37,144,1,0,0,0,39,162,1,0,0,0,41,178,1,0,
        0,0,43,194,1,0,0,0,45,204,1,0,0,0,47,225,1,0,0,0,49,248,1,0,0,0,
        51,250,1,0,0,0,53,275,1,0,0,0,55,278,1,0,0,0,57,283,1,0,0,0,59,304,
        1,0,0,0,61,308,1,0,0,0,63,317,1,0,0,0,65,323,1,0,0,0,67,325,1,0,
        0,0,69,329,1,0,0,0,71,331,1,0,0,0,73,74,5,40,0,0,74,2,1,0,0,0,75,
        76,5,41,0,0,76,4,1,0,0,0,77,78,5,61,0,0,78,6,1,0,0,0,79,80,5,105,
        0,0,80,81,5,110,0,0,81,8,1,0,0,0,82,83,5,44,0,0,83,10,1,0,0,0,84,
        85,5,33,0,0,85,86,5,61,0,0,86,12,1,0,0,0,87,88,5,58,0,0,88,14,1,
        0,0,0,89,90,5,46,0,0,90,91,5,46,0,0,91,16,1,0,0,0,92,93,5,97,0,0,
        93,94,5,110,0,0,94,95,5,100,0,0,95,18,1,0,0,0,96,97,5,111,0,0,97,
        98,5,114,0,0,98,20,1,0,0,0,99,100,5,110,0,0,100,101,5,111,0,0,101,
        102,5,116,0,0,102,22,1,0,0,0,103,104,5,42,0,0,104,24,1,0,0,0,105,
        106,5,116,0,0,106,107,5,121,0,0,107,108,5,112,0,0,108,109,5,101,
        0,0,109,26,1,0,0,0,110,111,5,105,0,0,111,112,5,100,0,0,112,28,1,
        0,0,0,113,114,5,103,0,0,114,115,5,101,0,0,115,116,5,111,0,0,116,
        117,5,109,0,0,117,118,5,101,0,0,118,119,5,116,0,0,119,120,5,114,
        0,0,120,121,5,121,0,0,121,30,1,0,0,0,122,123,5,97,0,0,123,124,5,
        114,0,0,124,125,5,101,0,0,125,126,5,97,0,0,126,32,1,0,0,0,127,128,
        5,112,0,0,128,129,5,101,0,0,129,130,5,114,0,0,130,131,5,105,0,0,
        131,132,5,109,0,0,132,133,5,101,0,0,133,134,5,116,0,0,134,135,5,
        101,0,0,135,136,5,114,0,0,136,34,1,0,0,0,137,138,5,108,0,0,138,139,
        5,101,0,0,139,140,5,110,0,0,140,141,5,103,0,0,141,142,5,116,0,0,
        142,143,5,104,0,0,143,36,1,0,0,0,144,145,5,103,0,0,145,146,5,101,
        0,0,146,147,5,111,0,0,147,148,5,109,0,0,148,149,5,101,0,0,149,150,
        5,116,0,0,150,151,5,114,0,0,151,152,5,121,0,0,152,153,5,46,0,0,153,
        154,5,118,0,0,154,155,5,101,0,0,155,156,5,114,0,0,156,157,5,116,
        0,0,157,158,5,105,0,0,158,159,5,99,0,0,159,160,5,101,0,0,160,161,
        5,115,0,0,161,38,1,0,0,0,162,163,5,103,0,0,163,164,5,101,0,0,164,
        165,5,111,0,0,165,166,5,109,0,0,166,167,5,101,0,0,167,168,5,116,
        0,0,168,169,5,114,0,0,169,170,5,121,0,0,170,171,5,46,0,0,171,172,
        5,111,0,0,172,173,5,117,0,0,173,174,5,116,0,0,174,175,5,101,0,0,
        175,176,5,114,0,0,176,177,5,115,0,0,177,40,1,0,0,0,178,179,5,103,
        0,0,179,180,5,101,0,0,180,181,5,111,0,0,181,182,5,109,0,0,182,183,
        5,101,0,0,183,184,5,116,0,0,184,185,5,114,0,0,185,186,5,121,0,0,
        186,187,5,46,0,0,187,188,5,105,0,0,188,189,5,110,0,0,189,190,5,110,
        0,0,190,191,5,101,0,0,191,192,5,114,0,0,192,193,5,115,0,0,193,42,
        1,0,0,0,194,195,5,99,0,0,195,196,5,104,0,0,196,197,5,97,0,0,197,
        198,5,110,0,0,198,199,5,103,0,0,199,200,5,101,0,0,200,201,5,115,
        0,0,201,202,5,101,0,0,202,203,5,116,0,0,203,44,1,0,0,0,204,205,5,
        99,0,0,205,206,5,104,0,0,206,207,5,97,0,0,207,208,5,110,0,0,208,
        209,5,103,0,0,209,210,5,101,0,0,210,211,5,115,0,0,211,212,5,101,
        0,0,212,213,5,116,0,0,213,214,5,46,0,0,214,215,5,99,0,0,215,216,
        5,114,0,0,216,217,5,101,0,0,217,218,5,97,0,0,218,219,5,116,0,0,219,
        220,5,101,0,0,220,221,5,100,0,0,221,222,5,95,0,0,222,223,5,98,0,
        0,223,224,5,121,0,0,224,46,1,0,0,0,225,226,5,104,0,0,226,227,5,97,
        0,0,227,228,5,115,0,0,228,229,5,104,0,0,229,230,5,116,0,0,230,231,
        5,97,0,0,231,232,5,103,0,0,232,48,1,0,0,0,233,234,5,110,0,0,234,
        235,5,111,0,0,235,236,5,100,0,0,236,249,5,101,0,0,237,238,5,119,
        0,0,238,239,5,97,0,0,239,249,5,121,0,0,240,241,5,114,0,0,241,242,
        5,101,0,0,242,243,5,108,0,0,243,244,5,97,0,0,244,245,5,116,0,0,245,
        246,5,105,0,0,246,247,5,111,0,0,247,249,5,110,0,0,248,233,1,0,0,
        0,248,237,1,0,0,0,248,240,1,0,0,0,249,50,1,0,0,0,250,251,3,49,24,
        0,251,252,5,47,0,0,252,253,3,55,27,0,253,52,1,0,0,0,254,255,5,112,
        0,0,255,256,5,111,0,0,256,257,5,105,0,0,257,258,5,110,0,0,258,276,
        5,116,0,0,259,260,5,108,0,0,260,261,5,105,0,0,261,262,5,110,0,0,
        262,276,5,101,0,0,263,264,5,112,0,0,264,265,5,111,0,0,265,266,5,
        108,0,0,266,267,5,121,0,0,267,268,5,103,0,0,268,269,5,111,0,0,269,
        276,5,110,0,0,270,271,5,111,0,0,271,272,5,116,0,0,272,273,5,104,
        0,0,273,274,5,101,0,0,274,276,5,114,0,0,275,254,1,0,0,0,275,259,
        1,0,0,0,275,263,1,0,0,0,275,270,1,0,0,0,276,54,1,0,0,0,277,279,3,
        65,32,0,278,277,1,0,0,0,279,280,1,0,0,0,280,278,1,0,0,0,280,281,
        1,0,0,0,281,56,1,0,0,0,282,284,3,65,32,0,283,282,1,0,0,0,284,285,
        1,0,0,0,285,283,1,0,0,0,285,286,1,0,0,0,286,293,1,0,0,0,287,289,
        5,46,0,0,288,290,3,65,32,0,289,288,1,0,0,0,290,291,1,0,0,0,291,289,
        1,0,0,0,291,292,1,0,0,0,292,294,1,0,0,0,293,287,1,0,0,0,293,294,
        1,0,0,0,294,301,1,0,0,0,295,297,7,0,0,0,296,298,3,65,32,0,297,296,
        1,0,0,0,298,299,1,0,0,0,299,297,1,0,0,0,299,300,1,0,0,0,300,302,
        1,0,0,0,301,295,1,0,0,0,301,302,1,0,0,0,302,58,1,0,0,0,303,305,3,
        67,33,0,304,303,1,0,0,0,305,306,1,0,0,0,306,304,1,0,0,0,306,307,
        1,0,0,0,307,60,1,0,0,0,308,310,5,34,0,0,309,311,3,69,34,0,310,309,
        1,0,0,0,311,312,1,0,0,0,312,310,1,0,0,0,312,313,1,0,0,0,313,314,
        1,0,0,0,314,315,5,34,0,0,315,62,1,0,0,0,316,318,7,1,0,0,317,316,
        1,0,0,0,318,319,1,0,0,0,319,317,1,0,0,0,319,320,1,0,0,0,320,321,
        1,0,0,0,321,322,6,31,0,0,322,64,1,0,0,0,323,324,7,2,0,0,324,66,1,
        0,0,0,325,326,7,3,0,0,326,68,1,0,0,0,327,330,8,4,0,0,328,330,3,71,
        35,0,329,327,1,0,0,0,329,328,1,0,0,0,330,70,1,0,0,0,331,332,5,92,
        0,0,332,333,7,5,0,0,333,72,1,0,0,0,13,0,248,275,280,285,291,293,
        299,301,306,312,319,329,1,6,0,0
    ]

class OFLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    AND = 9
    OR = 10
    NOT = 11
    WILDCARD = 12
    TYPE = 13
    ID = 14
    GEOMETRY = 15
    AREA = 16
    PERIMETER = 17
    LENGTH = 18
    GEOMETRY_VERTICES = 19
    GEOMETRY_OUTERS = 20
    GEOMETRY_INNERS = 21
    CHANGESET = 22
    CHANGESET_CREATEDBY = 23
    HASHTAG = 24
    OSMTYPE = 25
    OSMID = 26
    GEOMETRY_TYPE = 27
    NUMBER = 28
    DECIMAL = 29
    WORD = 30
    QUOTED = 31
    WHITESPACE = 32

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'='", "'in'", "','", "'!='", "':'", "'..'", "'and'", 
            "'or'", "'not'", "'*'", "'type'", "'id'", "'geometry'", "'area'", 
            "'perimeter'", "'length'", "'geometry.vertices'", "'geometry.outers'", 
            "'geometry.inners'", "'changeset'", "'changeset.created_by'", 
            "'hashtag'" ]

    symbolicNames = [ "<INVALID>",
            "AND", "OR", "NOT", "WILDCARD", "TYPE", "ID", "GEOMETRY", "AREA", 
            "PERIMETER", "LENGTH", "GEOMETRY_VERTICES", "GEOMETRY_OUTERS", 
            "GEOMETRY_INNERS", "CHANGESET", "CHANGESET_CREATEDBY", "HASHTAG", 
            "OSMTYPE", "OSMID", "GEOMETRY_TYPE", "NUMBER", "DECIMAL", "WORD", 
            "QUOTED", "WHITESPACE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "AND", "OR", "NOT", "WILDCARD", "TYPE", "ID", 
                  "GEOMETRY", "AREA", "PERIMETER", "LENGTH", "GEOMETRY_VERTICES", 
                  "GEOMETRY_OUTERS", "GEOMETRY_INNERS", "CHANGESET", "CHANGESET_CREATEDBY", 
                  "HASHTAG", "OSMTYPE", "OSMID", "GEOMETRY_TYPE", "NUMBER", 
                  "DECIMAL", "WORD", "QUOTED", "WHITESPACE", "NUMERAL", 
                  "LETTER", "CHARACTER", "EscapeSequence" ]

    grammarFileName = "OFL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


